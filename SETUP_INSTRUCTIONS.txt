   ====VAGRANT VIRTUALIZED DEV ENVIRONMENT SETUP INSTRUCTIONS===

I. PURPOSE

 > To enable the use of a simulated production environment by all members of Tech team 
irrespective of their local dev environments
> To get as much a sense of what the project is going to look like in production by using the 
same setup during development
> To automate installation of need web stack packages, development tools and such others.


II. REQUIRED COMPONENTS/DOWNLOADS

To properly setup a development environment using Vagrant, we need two vital components:

1. VirtualBox: While there are many other providers out there, we will be using VirtualBox 
to manage our Linux virtual machines.

You may find more detailed information about VirtualBox at: https://www.virtualbox.org/

2. Vagrant: This is the tool that will enable us to create "lightweight, reproducible and portable
development environments" for our project. This way, irrespective of what you use for a local
dev machine (PC, Mac, some-other-system, etc.), we can all use, run and develop on the same 
setup as everyone else on the team. No more, "I couldn't get it to work on my machine", 
"but it worked on mine without hiccups" lunch time conversations.

Please, find more detailed information at: https://www.vagrantup.com/

III. THE SETUP

There are three (3) parts to the setup for it to work

1. HOST MACHINE SETUP:
 
> On your host machine (your PC, Mac, etc.) create a directory called, "imentor_project"
> cd into this directory (cd imentor_project)
Now, we will clone the 'platform' and 'vagrant_devserver' repositories. This will help us 
avoid having to manually-tweak the vagrant configuration file (Vagrantfile) and other 
parts of the vagrant setup process.

Make sure you have git properly configured at this point.
If you need a refresher on setting up Git and GitHub, please, see:
> Using Git: https://www.atlassian.com/git/tutorials/
> Using GitHub: https://help.github.com/

(Or reach out to other members of the team who can help.)

While inside the imentor_project directory, you will download the 'platform' codebase 
and custom vagrant_devserver repositories from GitHub as follows (and in this order):
> Download the 'platform' repository: 
   1. Type (or paste) in: https://github.com/imentor/platform.git
   2. Change into the platform directory and ls to see that the 'platform'
   packages are there
   3. Exit the platform directory: cd ..

You should now be in the main imentor_project directory again.
> Download the vagrant_devserver repo:
While still inside the 'imentor_project' directory:
   1. Type (or paste) in: git clone https://github.com/jallohm/vagrant_devserver.git
   2. Change into the vagrant_devserver directory
   3. Copy the Vagrantfile and vagrant/ folder into the imentor_project/platform/imentor directory
    At this point when you view you visit imentor_project/platform/imentor, you should see, among other files and directories, 
    these:
    	> Vagrantfile
    	> vagrant/ folder
    	> manage.py

At this point, you are properly setup. Good job there! :)


Now, we are ready to set up the Vagrant virtualized environment to work on the codebase 
and run the project server.

2. GUEST MACHINE (VIRTUALIZED LOCAL SERVER) SETUP
At this point: 
   > cd into the 'platform' directory
   > The 'platform/imentor/' directory should have, among others, these additional contents:
	> vagrant : a folder
    > Vagrantfile : The config file for Vagrant
     

While still at platform/imentor, execute these commands:
   vagrant up : This will take some time. It will fetch the virtualbox instance, install
		everything up and get your Vagrant dev server ready. This may take several minutes.
   vagrant ssh: Once it is all setup and done, type in 'vagrant ssh' to SSH into your Vagrant dev server. 

At this point, your computer will treat the Vagrant box as it would a remote Linux server
that you are SSH-ing into.

THE FIRST TIME YOU SSH INTO YOUR VAGRANT DEV SERVER/MACHINE
The first time you run 'vagrant ssh' after setting up your Vagrant dev server, you will need to do two things:

1. Run "sudo python distribute_setup.py" to properly setup the pip (Python's package installer)

2. Follow these:
> cd imentor
> sudo pip install -r requirements.pip --allow-all-external 
  This will install the imentor project's package dependencies


Now, you are ready to start the server, test the project and so on, just as if you
were on a real production Linux server.

IV. MANAGING YOUR VAGRANT VIRTUAL DEV SERVER

1. Common Tasks:
> vagrant up: This is for booting/turning on the Vagrant dev server
> vagrant ssh: This is 'logging in' to your Vagrant dev server once it is booted.
> exit : While inside the server, execute this to logout of it. You will have to 'vagrant ssh' to get back on the server again.
> vagrant halt: This is for stopping the Vagrant dev server. It won't destroy it, just
	'shut down' the machine for a while.
> vagrant reload: This is for rebooting the Vagrant dev server after you 'halt' it or 
	change its configuration file (the Vagrantfile).
> vagrant status: This will tell you the state of the Vagrant machines you are running.
	Find out which ones are currently running, suspended or yet to be created.
> vagrant destroy: This will DELETE your Vagrant machine. You will have to run 'vagrant up' to create one afresh.


2. Special Tasks
> vagrant reload: If you edit the Vagrantfile (the configuration file) and need to restart
	restart/reload your Vagrant machine, run this command.
> vagrant destroy: This, as implied, will destroy/delete the Vagrant virtual dev server 
	you have spun. Note that it won't delete the vagrant boxes 
	(trusyt64, precise32, etc.) that you may have downloaded. These exist in your 
	local machine and can be used to spin multiple Vagrant dev servers.

> vagrant provision: Use this to restart your Vagrant dev server after you have edited the 
	accompanying shell script (e.g. after adding commands to install extra packages,
	etc.)


V. POSSIBLE HICKUPS and FIXES
There may be any number of potential hiccups during setup. I have configured the Vagrantfile to handle many of these, but there are other
potential ones. So, if you come across any, don't hesitate to share your frustration with us.

VI. CONTACT/SUPPORT 

Please, email the team for questions, comments, concerns or suggestions on your 
experience with and how to improve this process.